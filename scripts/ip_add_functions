#!/bin/bash

###############################################################################################################################
# DESCRIPTION:      Automated bash script for pulling geolocation data.
# USAGE:            Edit the variables with desired configuration and execute.
# CREATED BY:       William Thomas Bland.
###############################################################################################################################

# Declare variables.
user="e3admin"
db="e3db"                                          # MySQL database name
table="e3tb"                                       # MySQL table name.
dbuser="e3admin"                                   # MySQL database username
dbpass="E3System5!"                                # MySQL database password
outputlog="/home/$user/e3systems/logs/output"         # Output log file location.
rawlog="/home/$user/e3systems/logs/raw"            # Raw log file location.
pinglog="/home/$user/e3systems/logs/ping"
telnet="/home/$user/e3systems/scripts/ip_tel.sh"   # Telnet script location.

###############################################################################################################################

title_bar(){
        echo "########################################################################################################"
        echo "#                                                                                                      #"
        echo "#                                <<<< E3SYSTEMS - ADD IP ADDRESS >>>>                                  #"
        echo "#                                                                                                      #"
        echo "########################################################################################################"
        echo -e ""
}

# Clear log files function.
clear_logs(){
        rm -rf /home/"$user"/e3systems/logs/*/*log
}

# Check IP address validity function.
check_ip(){
        clear
        title_bar
        echo "Running validity test on IP Address \"$input\". Please wait..."
        return=$(ipcalc -cs4 "$input" && echo 0 || echo 1)
}

# Ping IP address function.
check_ping(){
        clear
        title_bar
        echo "Running ping test on IP Address \"$ipaddress\". Please wait..."
        return=$(ping -c5 -W30 "$ipaddress" &> "$pinglog"/"$ipaddress".log; echo "$?")
        echo -e ""
        cat "$pinglog/$ipaddress.log"
        sleep 5
}

# Get Ping function for retrieving minimum, average and maximum ping aswell as packet loss.
get_ping(){
        ping_min=$(grep 'rtt min/avg/max/mdev = ' "$pinglog"/"$ipaddress".log | cut -d'/' -f4 | sed 's/ ms//g' | sed "s/mdev = //" | cut -d'.' -f1)
        ping_avg=$(grep 'rtt min/avg/max/mdev = ' "$pinglog"/"$ipaddress".log | cut -d'/' -f5 | sed 's/ ms//g' | cut -d'.' -f1)
        ping_max=$(grep 'rtt min/avg/max/mdev = ' "$pinglog"/"$ipaddress".log | cut -d'/' -f6 | sed 's/ ms//g' | cut -d'.' -f1)
        packet_loss=$(grep 'packet loss' "$pinglog"/"$ipaddress".log | cut -d' ' -f6 | sed 's/%//g')
        echo -e "ping_min=$ping_min\nping_avg=$ping_avg\nping_max=$ping_max\npacket_loss=$packet_loss" >> "$outputlog"/"$ipaddress".log
}

# Log input function.
log_input(){
        echo "$1=$input" | tr '[:upper:]' '[:lower:]' | sed -e "s/ \|-/_/" >> "$outputlog"/"$ipaddress".log
        unset input
}
# Function checking if username and password are entered correctly.
check_userpass(){
        if [[ "$input" = */* ]]; then
                return=$(echo 0)
        else
                return=$(echo 1)
        fi
}

# Function for attempting to establish a telnet session to entered IP address.
check_telnet(){
        /home/e3admin/e3systems/scripts/ip_tel.sh "$ipaddress" "$username" "$password" | tee "$rawlog"/"$ipaddress".log
        lat=$( grep "latlong = " "$rawlog"/"$ipaddress".log | cut -d" " -f3-4 | sed 's/\r//g' ) 
        lng=$( grep "latlong = " "$rawlog"/"$ipaddress".log | cut -d" " -f5-6 | sed 's/\r//g' )
        if [[ "$lat" = *.* && "$lng" = *.* ]]; then
                return=$(echo 0)
        else
                return=$(echo 1)
        fi
}

# Runs this function when the main function requests an IP address as input.
ip_address(){
        # ipaddress="$input"
        check_ip
        case "$return" in
        # Add entered input into log file and quit loop if IP address is valid and successfully pinged
        0)      ipaddress="$input"
                check_ping
                case "$return" in
                0)      ipaddress="$input"
                        log_input "$string"
                        get_ping
                        clear
                        title_bar
                        read -p "Ping test successful. Press Enter to Continue..." 
                        break
                        ;;
                1)      unset yn
                        while [ -z "$yn" ]; do
                                clear
                                title_bar
                                read -p "Could not reach IP address \"$input\". Continue anyways? (y/n): " yn
                                case "$yn" in
                                y)      ipaddress="$input"
                                        log_input "$string"
                                        break 2
                                        ;;
                                n)      unset input
                                        ;;
                                *)      clear
                                        unset yn
                                        title_bar
                                        read -p "Invalid input. Press Enter to Continue..."  
                                        ;;
                                esac
                        done
                        ;;
                esac
                ;;
                # Display warning and prompt to save or re-enter input if IP address could not be pinged        
        1)      clear
                title_bar
                read -p "\"$input\" is not a valid IP Address. Press Enter to Continue..."
                unset input
                ;;
        esac                               
}

# Runs this function when the main function requests a username/password as input.
userpass(){
        check_userpass
        case "$return" in
        0)      username=$(echo "$input" | cut -d'/' -f1)
                password=$(echo "$input" | cut -d'/' -f2)
                clear
                title_bar
                echo -e "Running telnet session test on IP Address \"$input\". Please wait...\n"
                check_telnet
                sleep 5
                case "$return" in
                0)      echo "username=$username" >> "$outputlog"/"$ipaddress".log
                        echo "password=$password" >> "$outputlog"/"$ipaddress".log
                        clear
                        title_bar
                        read -p "Telnet connection successful. Press Enter to Continue..."                        
                        unset input  
                        break
                        ;;
                1)      unset yn
                        while [ -z "$yn" ]; do
                                clear
                                title_bar
                                read -p "Could not connect to \"$input\" via telnet. Continue anyways? (y/n): " yn
                                case "$yn" in
                                y)      echo "username=$username" >> "$outputlog"/"$ipaddress".log
                                        echo "password=$password" >> "$outputlog"/"$ipaddress".log
                                        unset input  
                                        break 2
                                        ;;
                                n)      unset input
                                        ;;
                                *)      clear
                                        unset yn
                                        read -p "Invalid input. Press Enter to Continue..."  
                                        ;;
                                esac
                        done
                        ;;
                esac
                ;;

        1)  clear
                title_bar
                read -p "Input is invalid. Press Enter to Continue..."  
                unset input
                ;;

        esac                           
}

# Runs this function when the main function requests a vessel name as input.
vessel_name(){
        unset yn
        vname=$(echo "$input" | tr '[:lower:]' '[:upper:]' | sed -e 's/_\|-/ /g')
        while [ -z "$yn" ]; do    
                clear
                title_bar
                read -p "You have entered \"$vname\" as the vessel name. Continue? (y/n): " yn
                case "$yn" in
                y)      confirm_inputs
                        ;;
                n)      unset input
                        ;;
                *)      clear
                        unset yn
                        title_bar
                        read -p "Invalid input. Press Enter to Continue..."  
                        ;;
                esac
        done
}

get_data(){
        # Grab latitude data from temporary file,populate variable named lat and make log entry.
        lat=$( grep "latlong = " "$rawlog"/"$ipaddress".log | cut -d" " -f3-4 | sed 's/\r//g')
        # grep "latlong = " "$rawlog"/"$ipaddress".log | cut -d" " -f3-4 | sed 's/\r//g' >> "$outputlog"/"$ipaddress".log

        # Convert Latitude variable to PRTG compatible value.
        if [[ $lat == *N ]]; then
                lat=$(echo "$lat" | sed 's/.$//' | sed 's/ //')
        else
                lat=$(echo "-$lat" | sed 's/.$//' | sed 's/ //')
        fi
        
        echo "lat=$lat" >> "$outputlog"/"$ipaddress".log


        # Grab longitude data from temporary file, populate variable named long and make log entry.
        lng=$( grep "latlong = " "$rawlog"/"$ipaddress".log | cut -d" " -f5-6 | sed 's/\r//g' )
        # grep "latlong = " "$rawlog"/"$ipaddress".log | cut -d" " -f5-6 | sed 's/\r//g' >> "$outputlog"/"$ipaddress".log

        # Convert longitude variable to PRTG compatible value.
        if [[ $lng == *E ]]; then
                lng=$(echo "$lng" | sed 's/.$//' | sed 's/ //')
        else
                lng=$(echo "-$lng" | sed 's/.$//' | sed 's/ //')
        fi

        echo "lng=$lng" >> "$outputlog"/"$ipaddress".log

        # Grab Rx SNR data from temporary file, populate variable named rxsnr and make log entry.
        rxsnr=$( grep "Rx SNR: " "$rawlog"/"$ipaddress".log | cut -d" " -f3 | sed 's/\r//g' )
        # grep "Rx SNR: " "$rawlog"/"$ipaddress".log | cut -d" " -f3 | sed 's/\r//g' >> "$outputlog"/"$ipaddress".log
        echo "rxsnr=$rxsnr" >> "$outputlog"/"$ipaddress".log

        # Grab Rx reg raw data from temporary file, populate variable named rxrr and make log entry.
        rxrr=$( grep "Rx raw reg: " "$rawlog"/"$ipaddress".log | cut -d" " -f4 | sed 's/\r//g' )
        # grep "Rx raw reg: " "$rawlog"/"$ipaddress".log | cut -d" " -f4 | sed 's/\r//g' >> "$outputlog"/"$ipaddress".log
        echo "rxrr=$rxrr" >> "$outputlog"/"$ipaddress".log

        # Grab Rx reg raw lookup data from temporary file, populate variable named rxrrl and make log entry.
        rxrrl=$( grep "Rx raw reg lookup: " "$rawlog"/"$ipaddress".log | cut -d" " -f5 | sed 's/\r//g' )
        # grep "Rx raw reg lookup: " "$rawlog"/"$ipaddress".log | cut -d" " -f5 | sed 's/\r//g' >> "$outputlog"/"$ipaddress".log
        echo "rxrrl=$rxrrl" >> "$outputlog"/"$ipaddress".log

        # Grab selected beam from temporary file, find corresponding beam, populate variable named beam and make log entry.
        beam_id=$( grep " is currently selected" "$rawlog"/"$ipaddress".log | cut -d" " -f1 | sed 's/\r//g' )
        # grep " is currently selected" "$rawlog"/"$ipaddress".log | cut -d" " -f1 | sed 's/\r//g' >> "$outputlog"/"$ipaddress".log
        echo "bean_id=$beam_id" >> "$outputlog"/"$ipaddress".log
        
        beam_name=$( grep "$beam_id = " "$rawlog"/"$ipaddress".log | cut -d" " -f3-20 | sed 's/\r//g' )
        # grep "$beam_id = " "$rawlog"/"$ipaddress".log | cut -d" " -f3-20 | sed 's/\r//g' >> "$outputlog"/"$ipaddress".log
        echo "beam_name=$beam_name" >> "$outputlog"/"$ipaddress".log

        echo "vessel_name=$vname" >> "$outputlog"/"$ipaddress".log

        vid=$(echo "$vname" | tr '[:upper:]' '[:lower:]' | sed -e 's/ \|-/_/g')
        echo "vessel_id=$vid" >> "$outputlog"/"$ipaddress".log

        unset state
        state="online"

        if [[ $ping_avg -gt 1250 || $packet_loss -gt 0 ]]; then
                state="warning"
        fi

        if [[ "$lat" != *.* || "$lng" != *.* ]]; then
                state="offline"
        fi 

        echo "state=$state" >> "$outputlog"/"$ipaddress".log
}

check_db(){
        checkdb=$(mysql $db -u$dbuser -p$dbpass -e "SELECT IP_Address FROM $table WHERE IP_Address='$ipaddress';" | grep -v 'IP_Address')
        if [[ "$checkdb" = "$ipaddress" ]]; then
                mysql $db -u$dbuser -p$dbpass -e "DELETE FROM $table WHERE IP_Address='$ipaddress';"
                sudo sed -i '/'$ipaddress'/d' /etc/crontab
        fi
        mysql $db -u$dbuser -p$dbpass -e "INSERT INTO \
        $table (IP_Address) \
        VALUES ('$ipaddress');"
}

insert_data(){
        # Insert data from above variables into MySQL database table.
        mysql $db -u$dbuser -p$dbpass -e "UPDATE $table SET \
        Vessel_Name='$vname', \
        Vessel_ID='$vid', \
        Ping_Min='$ping_min', \
        Ping_Avg='$ping_avg', \
        Ping_Max='$ping_max', \
        Packet_Loss='$packet_loss', \
        Latitude='$lat', \
        Longitude='$lng', \
        Rx_SNR='$rxsnr', \
        Rx_Raw_Reg='$rxrr', \
        Rx_Raw_Reg_Lookup='$rxrrl', \
        Beam_ID='$beam_id', \
        Beam_Name='$beam_name', \
        State='$state' \
        WHERE IP_Address='$ipaddress';"
}

confirm_inputs(){
        unset yn
        while [ -z "$yn" ]; do    
                clear
                title_bar
                echo -e "You have entered the following information...\n\nIP Address:\t$ipaddress\nUsername:\t$username\nPassword:\t$password\nVessel Name:\t$vname\n"
                read -p "Would you like to save and exit (s) or quit without saving any information (q)?: " yn
                case "$yn" in
                s)      check_db
                        get_data
                        insert_data
                        # check_db
                        clear
                        title_bar
                        read -p "IP address $ipaddress added to the database and crontab. Press any key to exit... "
                        clear
                        ;;
                q)      clear
                        title_bar
                        read -p "You have chosen to exit without adding an IP address. Press any key to exit... "
                        clear
                        break
                        ;;        
                *)      clear
                        unset yn
                        title_bar
                        read -p "Invalid input. Press Enter to Continue..."  
                        ;;
                esac
        done
}

# Input function for adding vessels
input(){
        # Run while loop until input variable is populated
        while [ -z "$input" ] ; do
                clear
                # Prompt for input
                title_bar
                read -p "Enter $1: " input
                # Run case statement based on input variable
                case "$input" in
                # Remove log file and quit loop if "q" is entered
                q)      clear_logs
                        clear
                        break
                        ;;
                # Display warning if input is left blank and prompt to re-enter input
                '')     clear
                        title_bar
                        read -p "Input is empty. Press Enter to Continue..."
                        ;;
                # Run check_ip function when IP address input is required
                *)      case "$1" in
                                                "IP Address")           ip_address
                                                                        ;;
                                                "Username/Password")    userpass
                                                                        ;;
                                                "Vessel Name")          vessel_name
                                                                        ;;                                                                                                                                                              
                                                esac                            
                        ;;
                esac
        done
        }

# Main function of script
main(){
        # Remove log files
        clear_logs
        # Create input prompts from strings entered in for loop
        for string in "IP Address" "Username/Password" "Vessel Name"; do
                input "$string"
        done
        }
# Run main function
main
exit 0
